function manPage() {
  const content =
`Usage: makeReact <componentName> -<args>

Naming your components: All component files are generated with start case,
            by default whereas the folder for the component will be lower
            case. Example: modal => Modal

Arguments:  Preceed your arguments with '-'. '--' are ignored. All
            arguments can be placed after one '-' or every argument
            can have it's own '-'.
            Example: -Atn and -A -t -n are both acceptable.

                 ***** FILE GENERATOR ARGUMENTS ******

-S:         Generates a single react component file with out a
            folder. This file by default is going to be a .js
            file with web code in mind.

-A:         Generates all folders and files as .js web files.

-D:         Generates the component as a folder component with
            an index file and the main component file.

-T:         Everything -D does as well as generate a test folder
            along with a test file for you component.

-l:         Will generate all of your files as lowercase instead
            of the default uppercase. Code component names will
            still be generated as uppercase.

-c:         Will generate all of your files as classes. Functional
            components are the default.

-d:         Will generate the component as a folder and will
            generate it with a dataLayer file.

-u:         Will generate the component as a folder and will
            generate it with a utils files. If you pass in -T
            as well it will generate a test file for your utils
            files as well.

-s:         Will generate the component as a folder and will
            generate it with a style file.

                 ***** PLATFORM GENERATOR ARGUMENTS ******

-t:         All files are generated by default as .js files. This
            argument will make them all .ts files for TypeScript
            instead.

-n:         All files are generated by default as react web files
            with HTML code and react web imports. This argument
            will make them all react native files instead with
            react native components and styles.

Parameters: Used to customize file extensions and pass state and
            props to components.

Full example: makeReact componentName -A @state:main:isOpen=bool
              @props:data:id=str @ext:main:jsx

                 ***** PARAMETER TYPES ******

@state:     Passes state parameters to your components. Only works
            for data layer files and main files.

@props:     Passes prop parameters to your components. Only works
            for data layer files and main files.

@ext:       Customizes file extensions. Works for all file types lists
            below.

                 ***** FILE TYPES ******

:main:      Specifies the single or main file as the parameter
            receiver.

:data:      Specifies the data layer file as the parameter receiver.

:style:     Specifies the style file as the parameter receiver.

:utils:     Specifies the utils file as the parameter receiver.

                 ***** KEY/VALUES ******

Structure: key=value,key=value

A comma separated, unbroken string of key value pairs that you pass in
for your state or props parameters. The key can be named anything, but
the value has to be one of the following type definitions.

String: [str, string]
Number: [num, number]
Boolean: [bool, boolean]
Object: [obj, object]
Array: [arr, array]
Any: [any]

Example: firstName=str,age=num,isHappy=bool,interests=obj
`;
  return content;
}

module.exports = manPage;
