/**
 * Render String if the condition is true
 *
 * @param {Boolean} condition
 * @param {String} string
 * @return {String}
 */
function renderString(condition, string) {
  if (condition) return string;
  return '';
}

/**
 * Render a new line if condition is true
 *
 * @param {Boolean} condition
 * @return {String}
 */
function newLine(condition) {
  if (condition) {
    return `
`;
  }
  return '';
}

/**
 * Generate Interface for TypeScript
 *
 * @param {String} name
 * @param {Boolean} hasParam
 * @param {String} string
 * @return {String}
 */
function genInterface(name, hasParams, string) {
  return `${renderString(name === 'State', newLine(true))}${hasParams
    ? `interface ${name} {
  ${string}
}`
    : `interface ${name} {}`}${newLine(true)}`;
}

/**
 * Generate prop types object
 *
 * @param {String} name
 * @param {String} string
 * @return {String}
 */
function genPropTypes(name, string) {
  return `${newLine(true)}${name}.propTypes = {
  ${string}
}${newLine(true)}`;
}

/**
 * Generate Prop String
 *
 * @param {Object} params - paramState
 * @param {String} key - paramState key
 * @return {Object}
 */
function getPropsString(params, key) {
  let propString = '';
  const hasProps = params.props[key].length > 0;
  if (hasProps) {
    params.props[key].forEach((prop, i, arr) => {
      if (i !== arr.length - 1) {
          propString += `${prop};
  `;
        return;
      }
      propString += `${prop};`;
    });
  }
  return {
    hasProps,
    propString,
  };
}

/**
 * Generate state string
 *
 * @param {Object} params - paramState
 * @param {String} key - paramState key
 * @return {Object}
 */
function getStateString(params, key) {
  let stateString = '';
  const hasState = params.state[key].length > 0;
  if (hasState) {
    params.state[key].forEach((state, i, arr) => {
      if (i !== arr.length - 1) {
          stateString += `${state};
  `;
        return;
      }
      stateString += `${state};`;
    });
  }
  return {
    hasState,
    stateString,
  };
}

/**
 * Generate prop types string
 *
 * @param {Object} params - paramState
 * @param {String} key - paramState key
 * @return {Object}
 */
function getPropTypesString(params, key) {
  let propTypesString = '';
  const hasPropTypes = params.props[key].length > 0;
  if (hasPropTypes) {
    params.propTypes[key].forEach((prop, i, arr) => {
      if (i !== arr.length - 1) {
          propTypesString += `${prop},
  `;
        return;
      }
      propTypesString += `${prop},`;
    });
  }
  return {
    hasPropTypes,
    propTypesString,
  };
}

/**
 * Renders a string of destructured values
 *
 * @param {Array} values - from params.[state, props].[key]
 * @return {String}
 */
function renderDestructuredValues(values) {
  let destructuredString = '';
  const hasValues = values.length > 0;
  if (hasValues) {
    values.forEach((val, i, arr) => {
      const isLastIndex = i === arr.length -1;
      const value = val.split(':')[0];
      if (arr.length > 3) {
        destructuredString += `
  ${value},`;
        if (isLastIndex) {
          destructuredString += `
`;
        }
        return;
      }
      destructuredString += ` ${value}${renderString(!isLastIndex, ',')}${renderString(isLastIndex, ' ')}`;
    });
  }
  return destructuredString;
}

/**
 * Renders the function declaration string
 *
 * @param {String} fileName
 * @param {Boolean} asTs
 * @param {Boolean} hasPropTypes
 * @param {String} props - generated by renderDestructuredValues
 * @return {String}
 */
function renderFunctionDeclaration(fileName, asTs, hasPropTypes, props) {
  const destructuredProps = hasPropTypes ? `{${props}}` : '';
  return asTs
    ? `const ${fileName}: React.FC<Props> = (${destructuredProps}) => {`
    : `function ${fileName}(${destructuredProps}) {`;
}

/**
 * Get generate file props
 * 
 * @param {String} fileName
 * @param {Object} args
 * @param {Object} params
 * @param {String} fileType - data | main
 * @return {Object}
 */
function getGenerateFileProps(fileName, args, params, fileType) {
  const renderTs = args.ext === 'ts';
  const { hasProps, propString } = getPropsString(params, fileType);
  const props = renderDestructuredValues(params.props.main);
  const { hasState, stateString } = getStateString(params, fileType);
  const { hasPropTypes, propTypesString } = getPropTypesString(params, fileType);
  const propsInterface = renderString(renderTs, genInterface('Props', hasProps, propString));
  const stateInterface = renderString((renderTs && hasState), genInterface('State', hasState, stateString));
  const modifiedFileName = fileType === 'data' ? `${fileName}DataLayer` : fileName;
  const propTypes = renderString((hasPropTypes && !renderTs), genPropTypes(modifiedFileName, propTypesString));
  return {
    fileName,
    args,
    renderTs,
    hasState,
    propsInterface,
    stateInterface,
    hasPropTypes,
    propTypes,
    props,
  };
}

module.exports = {
  genInterface,
  genPropTypes,
  getGenerateFileProps,
  getPropsString,
  getStateString,
  getPropTypesString,
  newLine,
  renderDestructuredValues,
  renderFunctionDeclaration,
  renderString,
}
